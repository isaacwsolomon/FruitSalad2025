<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Waiting Room</title>
</head>
<body>
    <h1>Waiting Room</h1>
    <h2>Game Code: <%= gameCode %></h2>
   
    <div id="playerList">
        <h2>Players in game</h2>
        <ul id="players">
            <!-- Players will be populated here -->
        </ul>
    </div>

    <div id="joinSection">
        <form id="joinForm">
            <input type="hidden" id="gameCode" value="<%= gameCode %>">
            <div>
                <label for="playerName">Your Name:</label>
                <input type="text" id="playerName" name="playerName" required>
            </div>
            <button type="submit">Join Game</button>
        </form>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
        var gameCode = document.getElementById('gameCode').value;
        var playersList = document.getElementById('players');
        var joinForm = document.getElementById('joinForm');
        var playerNameInput = document.getElementById('playerName');

        // Request current players when page loads
        socket.emit('get players', gameCode);

        // Handle form submission
        joinForm.addEventListener('submit', function(e) {
            e.preventDefault();
            if (playerNameInput.value.trim()) {
                // Emit join game event with proper data structure
                socket.emit('join game', {
                    playerName: playerNameInput.value.trim(),
                    gameCode: gameCode
                });
                playerNameInput.value = '';
            }
        });

        // Listen for players list updates
        socket.on('players list', function(players) {
            playersList.innerHTML = '';
            players.forEach(function(player) {
                var li = document.createElement('li');
                li.textContent = player.playerName;
                playersList.appendChild(li);
            });
        });

        // Listen for new player joined
        socket.on('player joined', function(data) {
            if (data.gameCode === gameCode) {
                // Request updated players list
                socket.emit('get players', gameCode);
            }
        });

          // Listen for players list updates for this specific game
        socket.on('players list update', function(data) {
            if (data.gameCode === gameCode) {
                playersList.innerHTML = '';
                data.players.forEach(function(player) {
                    var li = document.createElement('li');
                    li.textContent = player.playerName;
                    playersList.appendChild(li);
                });
            }
        });

        
        // Handle connection
        socket.on('connect', function() {
            console.log('Connected to server');
            // Re-request players on reconnect
            socket.emit('get players', gameCode);
        });

        // Handle errors
        socket.on('error', function(error) {
            alert('Error: ' + error.message);
        });
    </script>
</body>
</html>